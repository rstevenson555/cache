/* Generated by Together */

package com.bos.cache.impl;

import java.util.Iterator;

/**
 * This class creates a Iterator that knows how to loop over a MRUCache
 * It implements the Iterator interface, so that it can be used like
 * any other internal collection
 **/
class CacheIterator implements Iterator {
    private MRUCache cache = null;
    private int pos;

    /**
     * create the MRUCacheIterator
     *
     * @param mrucache the cache to iterate over
     **/
    CacheIterator(MRUCache mrucache) {
        cache = mrucache;
        pos = 0;
    }

    /**
     * checks to see if more items exist in the cache
     *
     * @return true if more items exist else false
     **/
    public boolean hasNext() {
        return pos < cache.getTotalSize();
    }

    /**
     * returns the MRUEntry object in the next position and
     * advances
     **/
    public Object next() {
        CacheData cacheData;
        Object value = null;
        int totalSize = cache.getTotalSize();
        do {
            cacheData = cache.getCacheData(pos++);
            if (cacheData!=null && (value = cacheData.validateKey()) != null) {
                break;
            }
        } while (pos < totalSize);
        return value;
    }

    /**
     * removes the current item that the iterator is pointing to
     * and leaves the position the same, ready for the next 'next' call
     **/
    public void remove() {
        cache.remove(pos);
    }
}
