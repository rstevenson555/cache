package com.omx.cache.expiring;

/**
 * this is a inner class defined to tie a data element
 * along to a time, so that we can check the data's age
 * and expire it when it get's too old
 **/
public class AgedData<D> {

    private D data;
    private long idleTime;
    private long birthTime;

    /**
     * holds on to a data element, and associates
     * a birth time and last update time with this object
     **/
    AgedData(D uData) {
        data = uData;
        birthTime = System.currentTimeMillis();
        touch();
    }

    /**
     * returns the last time this data was touched
     **/
    final long getIdleTime() {
        return idleTime;
    }
    
    /**
     * returns when this object was
     * born or (created)
     **/
    final long getBirthTime()
    {
        return birthTime;        
    }

    /**
     * updates the timestamp for the last time this data
     * element was touched
     **/
    void touch() {
        idleTime = System.currentTimeMillis();
    }

    /**
     * touches the last update time
     * and returns the data
     **/
    D getData() {
        return getData(true);
    }

    /**
     * modifies the last touched timetime
     * and returns the data assosicated
     **/
    D getData(boolean touch) {
        if (touch == true) {
            touch();
        }
        return data;
    }
}