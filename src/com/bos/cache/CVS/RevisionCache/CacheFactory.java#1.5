/* Generated by Together */

package com.bos.cache;

/**
* Defines the interface to the factory class
* used to create factory instances and instances of the caching classes
**/
abstract public class CacheFactory {
    static private String CACHEFACTORYIMPL = "com.bos.cache.impl.CacheFactoryImpl";

    protected CacheFactory()
    {
    }

    /**
     * creates an instance of the MRUCache
     * @return ICache the common cache interface defined
     **/
    public abstract Cache createMRUCache();

    /**
     * creates a MRUCache with a specified size
     * @param size the size of the cache, should be a <B>prime number</B>
     **/
    public abstract Cache createMRUCache(int size);

    /**
     * create an expiring cache, that is a cache that knows about items that expire
     * after a certain period of time
     * @param name the name of the cache
     * @param delay how often the cache is checked for expired items
     * @param to how long is the item valid in the cache
     * @param ptime the next time to print a status message
     **/
    public abstract ExpiringCache createExpiringCache(String name,int _delay, int to,int ptime);

    /**
     * This is a implementation that allows you to specify your own runnable thread to call
     * to over-ride the default run behaviour of the thread
     **/
    public abstract ExpiringCache createExpiringCache(Runnable thread,String name,int _delay, int to,int ptime);

    public abstract Cache createExpiringMRUCache(int size, int delay);

    /**
    * Lets a client get a instance to the concrete implemenation
    * of this class
    **/
    static public CacheFactory newInstance() {
        try{
            Class c = Class.forName(CACHEFACTORYIMPL);
            Object o = c.newInstance();
            return (CacheFactory)o;
        }
        catch(IllegalAccessException iae)
        {
            return null;
        }
        catch(ClassNotFoundException cnfe)
        {
            //logger.error("Failed to load "+CACHEFACTORYIMPL);
            return null;
        }
        catch(InstantiationException ie)
        {
           // logger.error("Failed to instantiate "+CACHEFACTORYIMPL);
           return null;
        }
    }

    /**
     * @link
     * @shapeType PatternLink
     * @pattern AbstractFactory
     * @supplierRole Product 
     */
    /*# private MRUCacheImpl _concreteProduct1; */
}
