/* Generated by Together */

package com.bos.cache;
import java.util.Iterator;

/**
* defines the interface, with basic functions for putting and getting
* data in and out of the cache and sizing the cache
**/
public interface Cache {
    /**
     * @link
     * @shapeType PatternLink
     * @pattern AbstractFactory
     * @supplierRole Concrete product 
     */
    /*# private MRUCacheImpl _concreteProduct1; */

    /**
     * put a value into the hash based on the key
     * @param key the key value used to lookup the value
     * @param value the data associated with the key
     **/
	public void put(Object key,Object value);

    /**
     * returns the object based on the key or null if not found
     * @return object with the data found from looking up the key or null if not found
     **/
    public Object get(Object key);


    public Object getByIntKey(int key);

    /**
     * initialize the cache to sz elements
     * @param sz specifies the size of the cache
     **/
    public void setCacheSize(int sz);

    /**
     * removes a entry from the cache
     * @param the key to lookup a particular piece of data
     **/
    public void remove(Object key);

    /**
     * remove all items from the cache
     **/
    public void clear();

    /**
     * gets the size of the cache
     **/
    public int size();

    /**
     * returns a iterator over the cache
     **/
    public Iterator iterator();


}
